use rpc_lib::rpc::Rpc;
use std::collections::HashMap;
use petgraph::algo::isomorphic_subgraph_matching;
use petgraph::graph::NodeIndex;
use petgraph::Graph;
use petgraph::Outgoing;
use graph_utils::graph_utils;

pub type CodeletType = fn(&Filter, &Rpc) -> Option<Rpc>;


// user defined functions:
{{#each udf_table}}{{{this.func_impl}}}{{/each}}


// This represents a piece of state of the filter
// it either contains a user defined function, or some sort of
// other persistent state
#[derive(Clone, Debug)]
pub struct State {
    pub type_of_state: Option<String>,
    pub string_data: Option<String>,
}

impl State {
    pub fn new() -> State {
        State {
            type_of_state: None,
            string_data: None,
        }
    }

    pub fn new_with_str(str_data: String) -> State {
        State {
            type_of_state: Some(String::from("String")),
            string_data: Some(str_data),
        }
    }
}

#[derive(Clone, Debug)]
pub struct Filter {
    pub whoami: Option<String>,
    pub target_graph: Option<Graph<(String, HashMap<String, String>), String>>,
    pub filter_state: HashMap<String, State>,
    internal_rpc_headers: HashMap<u64, Vec<HashMap<String, String>>>, // mapping from trace ID to headers
}

impl Filter {
    #[no_mangle]
    pub fn new() -> *mut Filter {
         Box::into_raw(Box::new(Filter {
            whoami: None,
            target_graph: None,
            filter_state: HashMap::new(),
            internal_rpc_headers: HashMap::<u64, Vec<HashMap<String, String>>>::new(),
         }))
    }

    #[no_mangle]
    pub fn new_with_envoy_properties(string_data: HashMap<String, String>) -> *mut Filter {
        let mut hash = HashMap::new();
        for key in string_data.keys() {
            hash.insert(key.clone(), State::new_with_str(string_data[key].clone()));
        }
        Box::into_raw(Box::new(Filter { whoami: None, target_graph: None, filter_state: hash, internal_rpc_headers: HashMap::new() }))
    }

    pub fn init_filter(&mut self) {
        if self.whoami.is_none() { self.set_whoami(); assert!(self.whoami.is_some()); }
        if self.target_graph.is_none() { self.create_target_graph(); }
        assert!(self.whoami.is_some());
    }

    pub fn set_whoami(&mut self) {
        let my_node_wrapped = self
            .filter_state
            .get("node.metadata.WORKLOAD_NAME");
        if my_node_wrapped.is_none() {
            print!("WARNING: filter was initialized without envoy properties and thus cannot function");
            return;
        }
        let my_node = my_node_wrapped
            .unwrap()
            .string_data
            .clone()
            .unwrap();
        self.whoami = Some(my_node);
        assert!(self.whoami.is_some());
    }

    pub fn merge_headers(&mut self, headers: Vec<HashMap<String, String>>, new_rpc_headers: HashMap<String, String>) -> HashMap<String, String> {
        if headers.len() == 0 {
            return new_rpc_headers;
        }
        let mut to_return = HashMap::new();
        for key in new_rpc_headers.keys() {
            // for all routing-related keys, don't change them
            if key == "location" || key == "direction" || key == "src" || key == "dest" {
                to_return.insert(key.to_string(), new_rpc_headers[key].clone());
            }
        }
        for header in headers {
            for key in header.keys() {
                // for properties, we get rid of duplicates
                if key != "location"
                          && key != "direction" 
                          && key != "src" 
                          && key != "dest" 
                          { // we don't want to edit these
                    if !to_return.contains_key(key) { to_return.insert(key.to_string(), header[key].clone()); }
                    else {
                        let cur_props : Vec<&str> = to_return[key].split(",").collect();
                        let new_props : Vec<&str> = header[key].split(",").collect();
                        let mut to_add = Vec::new();
                        for new_prop in new_props {
                            if !cur_props.contains(&new_prop) {
                                to_add.push(new_prop);
                            }
                        }
                        for new_prop in to_add { 
                            to_return.get_mut(key).unwrap().push_str(",");
                            to_return.get_mut(key).unwrap().push_str(new_prop);
                            print!("merging {0} with {1}\n", new_prop, to_return[key]);
                        }
                    }  
                }
            }
        }
        return to_return;
    }

    pub fn add_myself_to_path(&mut self, x: &mut Rpc) -> String {
        if !x.headers.contains_key("path") {
            x.headers.insert(String::from("path"), self.whoami.as_ref().unwrap().clone());
        }
        else {
            x.headers.get_mut("path").unwrap().push_str(";");
            x.headers.get_mut("path").unwrap().push_str(&self.whoami.as_ref().unwrap());
        }
        return x.headers["path"].clone();
    }

    pub fn create_target_graph(&mut self) {
        {{#each target_blocks}}{{{this}}} {{/each}}
    }

    pub fn create_trace_graph(&mut self, mut mod_rpc: Rpc) -> Graph<(String, HashMap<String, String>), String> {
        let trace;
        let mut path = mod_rpc.headers["path"].clone();
        if mod_rpc.headers.contains_key(&"properties".to_string()) {
            trace = graph_utils::generate_trace_graph_from_headers(
                        path, 
                        mod_rpc.headers.get_mut(&"properties".to_string()).unwrap().to_string());
        }
        else {
            trace = graph_utils::generate_trace_graph_from_headers(path, String::new());
        }
        return trace;
    }

    pub fn on_incoming_requests(&mut self, mut x: Rpc) -> Vec<Rpc> {
        let path = self.add_myself_to_path(&mut x);
        if self.internal_rpc_headers.contains_key(&x.uid) {
            self.internal_rpc_headers.get_mut(&x.uid).unwrap().push(x.headers.clone());
        } else {
            self.internal_rpc_headers.insert(x.uid, vec!(x.headers.clone()));
        }
        self.internal_rpc_headers.insert(x.uid, vec!(x.headers.clone()));
        return vec!(x);
    }

    pub fn on_outgoing_responses(&mut self, mut x: Rpc) -> Vec<Rpc> {
        if self.internal_rpc_headers.contains_key(&x.uid) {
            assert!(x.headers.contains_key("dest"));
            x.headers = self.merge_headers(self.internal_rpc_headers[&x.uid].clone(), x.headers);
        } else {
            println!("WARNING: Could not find saved headers for rpc {0}", x.uid);
            return vec!(x);
        }

        // at most, we return two rpcs:  one to continue on and one to storage
        let mut original_rpc = x.clone();
        let mut storage_rpc : Option<Rpc> = None;

        // calculate UDFs and store result
        {{#each udf_blocks}}{{{this}}} {{/each}}

        let mut trace_graph = self.create_trace_graph(x.clone());
        let mapping = isomorphic_subgraph_matching(
            self.target_graph.as_ref().unwrap(),
            &trace_graph,
            |x, y| {
                for property in y.1.keys() {
                    if x.1.contains_key(property) && &(x.1[property]) != &(y.1[property]) { return false; }
                }
            return true;
            },
            |x, y| x == y,
        );
        if !mapping.is_none() {
            let m = mapping.unwrap();
            let mut value = "0".to_string(); // dummy value
            // TODO: do return stuff
            {{#each response_blocks}}{{{this}}} {{/each}}
            let mut result_rpc = Rpc::new_with_src(&value, self.whoami.as_ref().unwrap());
            let mut dest = self.whoami.clone().unwrap().split("_").next().unwrap().to_string(); // do not take the _plugin affix
            dest.push_str("_storage");
            result_rpc
                .headers
                .insert("dest".to_string(), dest);
            result_rpc
                .headers
                .insert("direction".to_string(), "request".to_string());
            result_rpc.headers.insert("src".to_string(), self.whoami.clone().unwrap());
            storage_rpc = Some(result_rpc);
            return vec!(x, storage_rpc.unwrap());
       }
       return vec!(x);

    }

    pub fn on_outgoing_requests(&mut self, mut x: Rpc) -> Vec<Rpc>{
        if self.internal_rpc_headers.contains_key(&x.uid) {
            assert!(x.headers.contains_key("dest"));
            x.headers = self.merge_headers(self.internal_rpc_headers[&x.uid].clone(), x.headers);
        } else {
            println!("WARNING: Could not find saved headers for rpc {0}", x.uid);
            return vec!(x);
        }
        let prop_str;
        {{#each request_blocks}}{{{this}}} {{/each}}
        return vec!(x);
    }

    pub fn on_incoming_responses(&mut self, mut x: Rpc) -> Vec<Rpc> {
        if self.internal_rpc_headers.contains_key(&x.uid) {
            self.internal_rpc_headers.get_mut(&x.uid).unwrap().push(x.headers.clone());
        } else {
            self.internal_rpc_headers.insert(x.uid, vec!(x.headers.clone()));
        }
        return vec!(x);
    }


    #[no_mangle]
    pub fn execute(&mut self, x: &Rpc) -> Vec<Rpc> {
        self.init_filter();
        assert!(self.whoami.is_some());
        match x.headers["direction"].as_str() {
            "request" => {
                 match x.headers["location"].as_str() {
                 "ingress" => { return self.on_incoming_requests(x.clone()); }
                 "egress" => { return self.on_outgoing_requests(x.clone()); }
                 _ => { panic!("Filter got an rpc with no location\n"); }
                 }
             }
             "response" => {
                 match x.headers["location"].as_str() {
                 "ingress" => { return self.on_incoming_responses(x.clone()); }
                 "egress" => { return self.on_outgoing_responses(x.clone()); }
                 _ => { panic!("Filter got an rpc with no location\n"); }
                 }
             }
             _ => { panic!("Filter got an rpc with no direction\n"); }
        }
    }

}
